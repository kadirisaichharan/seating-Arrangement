<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Seating Arrangement Generator</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            background-color: white;
            border-radius: 8px;
            padding: 30px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
        }
        h1 {
            text-align: center;
            color: #2c3e50;
            margin-bottom: 30px;
        }
        .form-group {
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
        }
        input, select, textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }
        button {
            background-color: #3498db;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            display: block;
            margin: 30px auto 0;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: #2980b9;
        }
        .tab {
            display: none;
        }
        .tab.active {
            display: block;
        }
        .tab-buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
        }
        .preview-container {
            margin-top: 30px;
            padding: 20px;
            border: 1px solid #ddd;
            background-color: white;
            border-radius: 4px;
            overflow: auto;
        }
        .table-layout {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            justify-content: center;
        }
        .table {
            border: 2px solid #333;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: #f0f0f0;
            position: relative;
        }
        .table p {
            font-weight: bold;
            margin: 0;
        }
        .seat {
            position: absolute;
            width: 25px;
            height: 25px;
            background-color: #3498db;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
            font-size: 12px;
            font-weight: bold;
        }
        .guest-list {
            margin-top: 30px;
        }
        .guest-item {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid #eee;
        }
        .guest-entry {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }
        .guest-entry input {
            margin-right: 10px;
        }
        .guest-entry button {
            margin: 0 0 0 10px;
            padding: 8px 12px;
        }
        .remove-btn {
            background-color: #e74c3c;
        }
        .remove-btn:hover {
            background-color: #c0392b;
        }
        #progress-bar {
            height: 10px;
            background-color: #ecf0f1;
            border-radius: 5px;
            margin-bottom: 30px;
            overflow: hidden;
        }
        #progress {
            height: 100%;
            background-color: #3498db;
            width: 25%;
            transition: width 0.3s ease;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Seating Arrangement Generator</h1>
        
        <div id="progress-bar">
            <div id="progress"></div>
        </div>
        
        <div class="tab active" id="tab1">
            <h2>Event Details</h2>
            <div class="form-group">
                <label for="event-name">Event Name</label>
                <input type="text" id="event-name" placeholder="Wedding Reception, Birthday Party, etc.">
            </div>
            <div class="form-group">
                <label for="event-date">Event Date</label>
                <input type="date" id="event-date">
            </div>
            <div class="form-group">
                <label for="venue-name">Venue Name</label>
                <input type="text" id="venue-name" placeholder="Grand Hall, Garden Restaurant, etc.">
            </div>
            <div class="form-group">
                <label for="organizer">Organizer Name</label>
                <input type="text" id="organizer" placeholder="Your name">
            </div>
            <div class="tab-buttons">
                <div></div>
                <button onclick="nextTab(1)">Next</button>
            </div>
        </div>
        
        <div class="tab" id="tab2">
            <h2>Table Configuration</h2>
            <div class="form-group">
                <label for="num-tables">Number of Tables</label>
                <input type="number" id="num-tables" min="1" max="20" value="5">
            </div>
            <div class="form-group">
                <label for="table-shape">Table Shape</label>
                <select id="table-shape">
                    <option value="round">Round</option>
                    <option value="rectangle">Rectangle</option>
                </select>
            </div>
            <div class="form-group">
                <label for="seats-per-table">Seats per Table</label>
                <input type="number" id="seats-per-table" min="2" max="12" value="8">
            </div>
            <div class="tab-buttons">
                <button onclick="prevTab(2)">Previous</button>
                <button onclick="nextTab(2)">Next</button>
            </div>
        </div>
        
        <div class="tab" id="tab3">
            <h2>Guest List</h2>
            <p>Add guests and assign them to tables</p>
            
            <div id="guest-entries">
                <div class="guest-entry">
                    <input type="text" placeholder="Guest Name" class="guest-name">
                    <select class="guest-table"></select>
                    <button onclick="addGuestEntry()" class="add-btn">+</button>
                </div>
            </div>
            
            <div class="tab-buttons">
                <button onclick="prevTab(3)">Previous</button>
                <button onclick="nextTab(3)">Next</button>
            </div>
        </div>
        
        <div class="tab" id="tab4">
            <h2>Preview & Generate PDF</h2>
            
            <div class="preview-container">
                <h3 id="preview-title">Seating Arrangement</h3>
                <p id="preview-details"></p>
                
                <div id="layout-preview" class="table-layout">
                    <!-- Tables will be generated here -->
                </div>
                
                <div class="guest-list">
                    <h3>Guest List</h3>
                    <div id="guest-list-preview">
                        <!-- Guest list will be generated here -->
                    </div>
                </div>
            </div>
            
            <div class="tab-buttons">
                <button onclick="prevTab(4)">Previous</button>
                <button onclick="generatePDF()">Generate PDF</button>
            </div>
        </div>
    </div>

    <script>
        // Initialize jsPDF
        const { jsPDF } = window.jspdf;
        
        // Global variables
        let currentTab = 1;
        let guestCount = 1;
        let tableData = [];
        
        // Initialize table dropdown in the first guest entry
        updateTableDropdowns();
        
        function nextTab(current) {
            // Validate current tab
            if (!validateTab(current)) return;
            
            // Hide current tab and show next tab
            document.getElementById(`tab${current}`).classList.remove('active');
            document.getElementById(`tab${current+1}`).classList.add('active');
            currentTab = current + 1;
            
            // Update progress bar
            document.getElementById('progress').style.width = `${25 * currentTab}%`;
            
            // Special actions for specific tabs
            if (current === 1) {
                // Moving from tab 1 to tab 2
                updateEventPreview();
            } else if (current === 2) {
                // Moving from tab 2 to tab 3
                updateTableDropdowns();
            } else if (current === 3) {
                // Moving from tab 3 to tab 4
                updatePreview();
            }
        }
        
        function prevTab(current) {
            document.getElementById(`tab${current}`).classList.remove('active');
            document.getElementById(`tab${current-1}`).classList.add('active');
            currentTab = current - 1;
            document.getElementById('progress').style.width = `${25 * currentTab}%`;
        }
        
        function validateTab(tabNumber) {
            if (tabNumber === 1) {
                // Validate event details
                const eventName = document.getElementById('event-name').value;
                const eventDate = document.getElementById('event-date').value;
                const venueName = document.getElementById('venue-name').value;
                
                if (!eventName || !eventDate || !venueName) {
                    alert('Please fill in all the event details');
                    return false;
                }
            } else if (tabNumber === 2) {
                // Validate table configuration
                const numTables = parseInt(document.getElementById('num-tables').value);
                const seatsPerTable = parseInt(document.getElementById('seats-per-table').value);
                
                if (isNaN(numTables) || numTables < 1 || isNaN(seatsPerTable) || seatsPerTable < 2) {
                    alert('Please enter valid numbers for tables and seats');
                    return false;
                }
            } else if (tabNumber === 3) {
                // Validate guest list (at least one guest should be added)
                const guestInputs = document.querySelectorAll('.guest-name');
                if (guestInputs.length === 0) {
                    alert('Please add at least one guest');
                    return false;
                }
                
                // Check if all guest names are filled
                let valid = true;
                guestInputs.forEach(input => {
                    if (!input.value.trim()) {
                        valid = false;
                    }
                });
                
                if (!valid) {
                    alert('Please enter names for all guests');
                    return false;
                }
            }
            
            return true;
        }
        
        function updateTableDropdowns() {
            const numTables = parseInt(document.getElementById('num-tables').value) || 5;
            const tableDropdowns = document.querySelectorAll('.guest-table');
            
            tableDropdowns.forEach(dropdown => {
                // Clear existing options
                dropdown.innerHTML = '';
                
                // Add new options
                for (let i = 1; i <= numTables; i++) {
                    const option = document.createElement('option');
                    option.value = i;
                    option.textContent = `Table ${i}`;
                    dropdown.appendChild(option);
                }
            });
        }
        
        function addGuestEntry() {
            guestCount++;
            const guestEntries = document.getElementById('guest-entries');
            
            const entry = document.createElement('div');
            entry.className = 'guest-entry';
            
            const nameInput = document.createElement('input');
            nameInput.type = 'text';
            nameInput.placeholder = 'Guest Name';
            nameInput.className = 'guest-name';
            
            const tableSelect = document.createElement('select');
            tableSelect.className = 'guest-table';
            
            const removeBtn = document.createElement('button');
            removeBtn.className = 'remove-btn';
            removeBtn.textContent = '-';
            removeBtn.onclick = function() {
                guestEntries.removeChild(entry);
            };
            
            entry.appendChild(nameInput);
            entry.appendChild(tableSelect);
            entry.appendChild(removeBtn);
            
            guestEntries.appendChild(entry);
            
            // Update the new dropdown options
            const numTables = parseInt(document.getElementById('num-tables').value) || 5;
            for (let i = 1; i <= numTables; i++) {
                const option = document.createElement('option');
                option.value = i;
                option.textContent = `Table ${i}`;
                tableSelect.appendChild(option);
            }
        }
        
        function updateEventPreview() {
            const eventName = document.getElementById('event-name').value;
            const eventDate = document.getElementById('event-date').value;
            const venueName = document.getElementById('venue-name').value;
            const organizer = document.getElementById('organizer').value;
            
            document.getElementById('preview-title').textContent = eventName + ' - Seating Arrangement';
            
            const formattedDate = new Date(eventDate).toLocaleDateString('en-US', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
            
            document.getElementById('preview-details').innerHTML = 
                `<strong>Date:</strong> ${formattedDate}<br>
                <strong>Venue:</strong> ${venueName}<br>
                <strong>Organized by:</strong> ${organizer}`;
        }
        
        function updatePreview() {
            updateEventPreview();
            
            // Create table layout for preview
            const layoutPreview = document.getElementById('layout-preview');
            layoutPreview.innerHTML = '';
            
            const numTables = parseInt(document.getElementById('num-tables').value);
            const tableShape = document.getElementById('table-shape').value;
            const seatsPerTable = parseInt(document.getElementById('seats-per-table').value);
            
            // Reset table data
            tableData = [];
            
            // Collect guest data
            const guestNames = document.querySelectorAll('.guest-name');
            const guestTables = document.querySelectorAll('.guest-table');
            const guests = [];
            
            for (let i = 0; i < guestNames.length; i++) {
                if (guestNames[i].value.trim()) {
                    guests.push({
                        name: guestNames[i].value.trim(),
                        table: parseInt(guestTables[i].value)
                    });
                }
            }
            
            // Create tables for preview
            for (let i = 1; i <= numTables; i++) {
                const tableGuests = guests.filter(guest => guest.table === i);
                
                tableData.push({
                    id: i,
                    guests: tableGuests
                });
                
                const table = document.createElement('div');
                table.className = 'table';
                
                // Set table size based on shape
                if (tableShape === 'round') {
                    table.style.width = '160px';
                    table.style.height = '160px';
                } else {
                    table.style.width = '200px';
                    table.style.height = '120px';
                    table.style.borderRadius = '10px';
                }
                
                const tableLabel = document.createElement('p');
                tableLabel.textContent = `Table ${i}`;
                table.appendChild(tableLabel);
                
                // Add seats around the table
                const tableGuestNames = tableGuests.map(g => g.name);
                for (let j = 0; j < seatsPerTable; j++) {
                    const seat = document.createElement('div');
                    seat.className = 'seat';
                    
                    // Position the seat around the table
                    const angle = (j / seatsPerTable) * 2 * Math.PI;
                    const radius = tableShape === 'round' ? 70 : (j < seatsPerTable/2 ? 50 : 50);
                    
                    if (tableShape === 'round') {
                        const x = Math.cos(angle) * radius;
                        const y = Math.sin(angle) * radius;
                        seat.style.left = `calc(50% + ${x}px - 12.5px)`;
                        seat.style.top = `calc(50% + ${y}px - 12.5px)`;
                    } else {
                        // For rectangle tables, place seats on the sides
                        if (j < seatsPerTable/2) {
                            // Top side
                            const step = 180 / (seatsPerTable/2 - 1);
                            const xPos = j * step - 90;
                            seat.style.left = `calc(50% + ${xPos}px - 12.5px)`;
                            seat.style.top = '5px';
                        } else {
                            // Bottom side
                            const step = 180 / (seatsPerTable/2 - 1);
                            const xPos = (j - seatsPerTable/2) * step - 90;
                            seat.style.left = `calc(50% + ${xPos}px - 12.5px)`;
                            seat.style.bottom = '5px';
                        }
                    }
                    
                    // Assign guest to seat if available
                    if (j < tableGuestNames.length) {
                        seat.textContent = (j + 1);
                        seat.title = tableGuestNames[j];
                        seat.style.backgroundColor = '#2ecc71';
                    } else {
                        seat.textContent = (j + 1);
                        seat.style.backgroundColor = '#95a5a6';
                    }
                    
                    table.appendChild(seat);
                }
                
                layoutPreview.appendChild(table);
            }
            
            // Update guest list preview
            const guestListPreview = document.getElementById('guest-list-preview');
            guestListPreview.innerHTML = '';
            
            if (guests.length === 0) {
                guestListPreview.innerHTML = '<p>No guests added yet.</p>';
            } else {
                // Sort guests by table
                guests.sort((a, b) => a.table - b.table);
                
                // Group guests by table
                const guestsByTable = {};
                guests.forEach(guest => {
                    if (!guestsByTable[guest.table]) {
                        guestsByTable[guest.table] = [];
                    }
                    guestsByTable[guest.table].push(guest);
                });
                
                // Display guests by table
                Object.keys(guestsByTable).forEach(tableNum => {
                    const tableHeader = document.createElement('h4');
                    tableHeader.textContent = `Table ${tableNum}`;
                    guestListPreview.appendChild(tableHeader);
                    
                    const tableGuests = guestsByTable[tableNum];
                    tableGuests.forEach((guest, index) => {
                        const guestItem = document.createElement('div');
                        guestItem.className = 'guest-item';
                        guestItem.innerHTML = `
                            <span>${guest.name}</span>
                            <span>Seat ${index + 1}</span>
                        `;
                        guestListPreview.appendChild(guestItem);
                    });
                });
            }
        }
        
        function generatePDF() {
            const doc = new jsPDF();
            
            // Get event details
            const eventName = document.getElementById('event-name').value;
            const eventDate = new Date(document.getElementById('event-date').value).toLocaleDateString('en-US', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
            const venueName = document.getElementById('venue-name').value;
            const organizer = document.getElementById('organizer').value;
            
            // Add title
            doc.setFontSize(22);
            doc.setTextColor(33, 33, 33);
            doc.text(eventName, 105, 20, { align: 'center' });
            
            doc.setFontSize(16);
            doc.text('Seating Arrangement', 105, 30, { align: 'center' });
            
            // Add event details
            doc.setFontSize(12);
            doc.text(`Date: ${eventDate}`, 20, 45);
            doc.text(`Venue: ${venueName}`, 20, 52);
            doc.text(`Organized by: ${organizer}`, 20, 59);
            
            // Add table information
            doc.setFontSize(14);
            doc.text('Table Assignments', 105, 75, { align: 'center' });
            
            let yPosition = 85;
            const lineHeight = 7;
            
            tableData.forEach(table => {
                // Check if we need a new page
                if (yPosition > 270) {
                    doc.addPage();
                    yPosition = 20;
                }
                
                doc.setFontSize(13);
                doc.setTextColor(52, 152, 219);
                doc.text(`Table ${table.id}`, 20, yPosition);
                yPosition += lineHeight;
                
                doc.setFontSize(11);
                doc.setTextColor(33, 33, 33);
                
                if (table.guests.length === 0) {
                    doc.text('No guests assigned', 30, yPosition);
                    yPosition += lineHeight;
                } else {
                    table.guests.forEach((guest, index) => {
                        doc.text(`Seat ${index + 1}: ${guest.name}`, 30, yPosition);
                        yPosition += lineHeight;
                    });
                }
                
                yPosition += 5; // Add some space between tables
            });
            
            // Add footer
            doc.setFontSize(10);
            doc.setTextColor(100, 100, 100);
            const today = new Date().toLocaleDateString();
            doc.text(`Generated on ${today}`, 105, 280, { align: 'center' });
            
            // Save the PDF
            doc.save(`${eventName}_Seating_Arrangement.pdf`);
        }
    </script>
</body>
</html>
